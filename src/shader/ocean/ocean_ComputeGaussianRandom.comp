#version 430 core

layout(local_size_x=8,local_size_y=8,local_size_z=1) in;//一个线程组的线程信息

layout(rgba32f,binding=1) uniform image2D GaussianRandomRT;//高斯随机数


#define PI 3.14159274f
uniform int N;//fft纹理大小

uint rngState;

float rand();
uint wangHash(uint seed);
vec2 gaussian(vec2 id);




//计算高斯随机变量
void ComputeGaussianRandom(uvec3 SV_DispatchThreadID)//线程唯一全局坐标
{
    vec2 g = gaussian(SV_DispatchThreadID.xy);
    imageStore(GaussianRandomRT,ivec2(SV_DispatchThreadID.xy),vec4(g,0,0));
    // GaussianRandomRT[id.xy] = vec4(g, 0, 0);
}
//计算高斯随机数
vec2 gaussian(vec2 id)
{
    //均匀分布随机数
    rngState = wangHash(uint(id.y * N + id.x));
    float x1 = rand();
    float x2 = rand();

    x1 = max(1e-6f, x1);
    x2 = max(1e-6f, x2);
    //计算两个相互独立的高斯随机数
    float g1 = sqrt(-2.0f * log(x1)) * cos(2.0f * PI * x2);
    float g2 = sqrt(-2.0f * log(x1)) * sin(2.0f * PI * x2);

    return vec2(g1, g2);
}
//随机种子
uint wangHash(uint seed)
{
    seed = (seed ^ 61) ^(seed >> 16);
    seed *= 9;
    seed = seed ^(seed >> 4);
    seed *= 0x27d4eb2d;
    seed = seed ^(seed >> 15);
    return seed;
}
//计算均匀分布随机数[0,1)
float rand()
{
    // Xorshift算法
    rngState ^= (rngState << 13);
    rngState ^= (rngState >> 17);
    rngState ^= (rngState << 5);
    return rngState / 4294967296.0f;;
}



void main()
{
    // rngState = rngState_;
    uvec3 SV_DispatchThreadID=gl_GlobalInvocationID;
    ComputeGaussianRandom(SV_DispatchThreadID);
}