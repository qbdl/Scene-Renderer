#version 430 core

layout(local_size_x=8,local_size_y=8,local_size_z=1) in;//一个线程组的线程信息

layout(rgba32f,binding=2) uniform image2D HeightSpectrumRT;
layout(rgba32f,binding=3) uniform image2D DisplaceXSpectrumRT;
layout(rgba32f,binding=4) uniform image2D DisplaceZSpectrumRT;
layout(rgba32f,binding=7) uniform image2D DisplaceRT;

uniform int N;
uniform float Lambda;
uniform float HeightScale;


//生成偏移纹理
void TextureGenerationDisplace(uvec3 SV_DispatchThreadID)
{
    uvec3 id=SV_DispatchThreadID;

    float y =length(imageLoad(HeightSpectrumRT,ivec2(id.xy)).xy) * 1.0f/ (N * N) * HeightScale;
    float x =length(imageLoad(DisplaceXSpectrumRT,ivec2(id.xy)).xy) * 1.0f/ (N * N) * Lambda;
    float z =length(imageLoad(DisplaceZSpectrumRT,ivec2(id.xy)).xy) *1.0f/ (N * N) * Lambda;
    
    // float y = length(HeightSpectrumRT[id.xy].xy) / (N * N) * HeightScale;//高度
    // float x = length(DisplaceXSpectrumRT[id.xy].xy) / (N * N) * Lambda;//x轴偏移
    // float z = length(DisplaceZSpectrumRT[id.xy].xy) / (N * N) * Lambda;//z轴偏移
    
    imageStore(HeightSpectrumRT,ivec2(id.xy),vec4(y, y, y, 0));
    imageStore(DisplaceXSpectrumRT,ivec2(id.xy),vec4(x, x, x, 0));
    imageStore(DisplaceZSpectrumRT,ivec2(id.xy),vec4(z, z, z, 0));
    imageStore(DisplaceRT,ivec2(id.xy),vec4(x, y,z, 0));
    
    // HeightSpectrumRT[id.xy] = float4(y, y, y, 0);
    // DisplaceXSpectrumRT[id.xy] = float4(x, x, x, 0);
    // DisplaceZSpectrumRT[id.xy] = float4(z, z, z, 0);
    // DisplaceRT[id.xy] = float4(x, y, z, 0);
}

void main()
{
    uvec3 SV_DispatchThreadID=gl_GlobalInvocationID;
    TextureGenerationDisplace(SV_DispatchThreadID);
    
}