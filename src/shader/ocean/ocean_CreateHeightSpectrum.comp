#version 430 core

layout(local_size_x=8,local_size_y=8,local_size_z=1) in;//一个线程组的线程信息

layout(rgba32f,binding=1) uniform image2D GaussianRandomRT;
layout(rgba32f,binding=2) uniform image2D HeightSpectrumRT;

uniform int N;
uniform float Time;
uniform vec4 WindAndSeed;
uniform float A;

#define G 9.81f
#define PI 3.14159274f

float atan2(float y, float x);
float DonelanBannerDirectionalSpreading(vec2 k);
float phillips(vec2 k);
vec2 complexMultiply(vec2 c1, vec2 c2);
float dispersion(vec2 k);


//生成高度频谱
void CreateHeightSpectrum(uvec3 SV_DispatchThreadID)
{
    uvec3 id=SV_DispatchThreadID;
    vec2 k = vec2(2.0f * PI * id.x / N - PI, 2.0f * PI * id.y / N - PI);

    vec2 cur_gaussian=imageLoad(GaussianRandomRT,ivec2(id.xy)).xy;
    // vec2 cur_gaussian = GaussianRandomRT[id.xy].xy;

    vec2 hTilde0 = cur_gaussian *sqrt(abs(phillips(k) * DonelanBannerDirectionalSpreading(k)) / 2.0f);
    vec2 hTilde0Conj = cur_gaussian *sqrt(abs(phillips(-k) * DonelanBannerDirectionalSpreading(-k)) / 2.0f);
    hTilde0Conj.y *= -1.0f;

    float omegat = dispersion(k) * Time;
    float c = cos(omegat);
    float s = sin(omegat);
    
    vec2 h1 = complexMultiply(hTilde0, vec2(c, s));
    vec2 h2 = complexMultiply(hTilde0Conj, vec2(c, -s));

    vec2 HTilde = h1 + h2;


    // imageStore(HeightSpectrumRT,ivec2(id.xy),vec4(100*phillips(k)*DonelanBannerDirectionalSpreading(k),100*phillips(k)*DonelanBannerDirectionalSpreading(k), 0, 0));
    imageStore(HeightSpectrumRT,ivec2(id.xy),vec4(HTilde, 0, 0));
    // HeightSpectrumRT[id.xy] = vec4(HTilde, 0, 0);
}

//计算phillips谱
float phillips(vec2 k)
{
    float kLength = length(k);
    kLength = max(0.001f, kLength);
    // kLength = 1;
    float kLength2 = kLength * kLength;
    float kLength4 = kLength2 * kLength2;

    float windLength = length(WindAndSeed.xy);
    float  L = windLength * windLength / G;
    float l2 = L * L;

    float damping = 0.001f;
    float L2 = l2 * damping * damping;

    //phillips谱
    return  A * exp(-1.0f / (kLength2 * l2)) / kLength4* exp(-kLength2 * L2);//Phillips谱在波数|k|较大时收敛性较差，一个方法是抑制较小的波浪。乘以exp(-kLength2 * L2)用于修正Phillips。
}

//Donelan-Banner方向拓展
float DonelanBannerDirectionalSpreading(vec2 k)
{
    float betaS;
    float omegap = 0.855f * G / length(WindAndSeed.xy);
    float ratio = dispersion(k) / omegap;

    if (ratio < 0.95f)
    {
        betaS = 2.61f * pow(ratio, 1.3f);
    }
    if(ratio >= 0.95f && ratio < 1.6f)
    {
        betaS = 2.28f * pow(ratio, -1.3f);
    }
    if(ratio > 1.6f)
    {
        float epsilon = -0.4f + 0.8393f * exp(-0.567f * log(ratio * ratio));
        betaS = pow(10, epsilon);
    }
    float theta = atan2(k.y, k.x) - atan2(WindAndSeed.y, WindAndSeed.x);

    return betaS / max(1e-7f, 2.0f * tanh(betaS * PI) * pow(cosh(betaS * theta), 2));
}

//计算弥散
float dispersion(vec2 k)//w
{
    return sqrt(G * length(k));
}
//复数相乘
vec2 complexMultiply(vec2 c1, vec2 c2)
{
    return vec2(c1.x * c2.x - c1.y * c2.y,
    c1.x * c2.y + c1.y * c2.x);
}


float atan2(float y, float x)
{
    //[-pi,pi]
    float temp=atan(y/x);//[-pi/2,pi/2]
    if(y>0&&x<0) 
        return temp+PI;
    else if(y<0&&x<0) 
        return temp-PI;
    else 
        return temp;
}

void main()
{
    uvec3 SV_DispatchThreadID=gl_GlobalInvocationID;
    CreateHeightSpectrum(SV_DispatchThreadID);
}